;; Programming Languages, Homework 5

#lang racket
(provide (all-defined-out)) ;; so we can put tests in a second file

;; definition of structures for MUPL programs - Do NOT change
(struct var  (string) #:transparent)  ;; a variable, e.g., (var "foo")
(struct int  (num)    #:transparent)  ;; a constant number, e.g., (int 17)
(struct add  (e1 e2)  #:transparent)  ;; add two expressions
(struct ifgreater (e1 e2 e3 e4)    #:transparent) ;; if e1 > e2 then e3 else e4
(struct fun  (nameopt formal body) #:transparent) ;; a recursive(?) 1-argument function
(struct call (funexp actual)       #:transparent) ;; function call
(struct mlet (var e body) #:transparent) ;; a local binding (let var = e in body) 
(struct apair (e1 e2)     #:transparent) ;; make a new pair
(struct fst  (e)    #:transparent) ;; get first part of a pair
(struct snd  (e)    #:transparent) ;; get second part of a pair
(struct aunit ()    #:transparent) ;; unit value -- good for ending a list
(struct isaunit (e) #:transparent) ;; evaluate to 1 if e is unit else 0

;; a closure is not in "source" programs but /is/ a MUPL value; it is what functions evaluate to
(struct closure (env fun) #:transparent) 

;; Problem 1

(define (racketlist->mupllist rktlist)
  (if (empty? rktlist)
      (aunit)
      (apair
       (car rktlist)
       (racketlist->mupllist (cdr rktlist)))
       ))

(define (mupllist->racketlist mupllist)
  (if (aunit? mupllist)
      null
      (cons (apair-e1 mupllist)
            (mupllist->racketlist (apair-e2 mupllist)))))

;; Problem 2

;; lookup a variable in an environment
;; Do NOT change this function
(define (envlookup env str)
  (cond [(null? env) (error "unbound variable during evaluation" str)]
        [(equal? (car (car env)) str) (cdr (car env))]
        [#t (envlookup (cdr env) str)]))

;; Do NOT change the two cases given to you.  
;; DO add more cases for other kinds of MUPL expressions.
;; We will test eval-under-env by calling it directly even though
;; "in real life" it would be a helper function of eval-exp.
(define (eval-under-env e env)
  (cond [(var? e) 
         (envlookup env (var-string e))]
        [(add? e) 
         (let ([v1 (eval-under-env (add-e1 e) env)]
               [v2 (eval-under-env (add-e2 e) env)])
           (if (and (int? v1)
                    (int? v2))
               (int (+ (int-num v1) 
                       (int-num v2)))
               (error "MUPL addition applied to non-number")))]
        ;; ERV added cases here ===>
        [(int? e) e]
        [(aunit? e) e]
        [(closure? e) e]
        [(fun? e) (closure env e)]
        [(ifgreater? e)
         (let ([v1 (eval-under-env (ifgreater-e1 e) env)]
               [v2 (eval-under-env (ifgreater-e2 e) env)])
           (if (and (int? v1)
                    (int? v2))
               (if (> (int-num v1) (int-num v2))
                   (eval-under-env (ifgreater-e3 e) env)
                   (eval-under-env (ifgreater-e4 e) env))
               (error "MUPL ifgreater expression evaluated to non-number")))]
        [(call? e)
         (let ([clos (eval-under-env (call-funexp e) env)]
               [args (eval-under-env (call-actual e) env)])
           (if (not(closure? clos))
               (error "MUPL call passed a non-function as function expression")
               (let ([f (closure-fun clos)])
                 (eval-under-env (fun-body f)
                                 (let ([arg-entry (cons (fun-formal f) args)]
                                       [clos-env (closure-env clos)])
                                   (if (fun-nameopt f)
                                       (cons (cons (fun-nameopt f) clos) (cons arg-entry clos-env))
                                       (cons arg-entry clos-env)))))))]
        ;ERV: struggling to write an appropriate recursive test case for the above for named functions.
        [(mlet? e)
         (let ([new-env (cons (cons (mlet-var e) (eval-under-env (mlet-e e) env)) env)])
           (eval-under-env (mlet-body e) new-env))]
        [(apair? e)
         (let ([v1 (eval-under-env (apair-e1 e) env)]
               [v2 (eval-under-env (apair-e2 e) env)])
           (apair v1 v2))] ;no type checking needed, as pair can hold (aunit)
        [(fst? e)
         (let ([v (eval-under-env (fst-e e) env)])
           (if (apair? v) (apair-e1 v) (error "MUPL fst passed non-pair expression")))]
        [(snd? e)
         (let ([v (eval-under-env (snd-e e) env)])
           (if (apair? v) (apair-e2 v) (error "MUPL snd passed non-pair expression")))]
        [(isaunit? e)
         (let ([v (eval-under-env (isaunit-e e) env)])
           (if (aunit? v) (int 1) (int 0)))]
        ;; End of ERV added cases
        [#t (error (format "bad MUPL expression: ~v" e))]))

;; Do NOT change
(define (eval-exp e)
  (eval-under-env e null))
        
;; Problem 3

(define (ifaunit e1 e2 e3) (ifgreater (isaunit e1) (int 0) e2 e3))

(define (mlet* lstlst e2)
  (if (empty? lstlst)
           e2
           (mlet (caar lstlst) (cdar lstlst)
                 (mlet* (cdr lstlst)
                        e2))))

(define (ifeq e1 e2 e3 e4)
  (mlet* (list (cons "_x" e1) (cons "_y" e2))
         (ifgreater (var "_x") (var "_y") e4
                                (ifgreater (var "_y") (var "_x") e4 e3))))

;; Problem 4
(define mupl-map
  (fun #f "mupl-f"
       (fun "mupl-listf" "mupl-list"
            (ifaunit (var "mupl-list")
                     (aunit)
                     (apair
                        (call (var "mupl-f") (fst (var "mupl-list")))
                        (call (var "mupl-listf") (snd (var "mupl-list")))
                      )))))

(define mupl-mapAddN 
  (mlet "map" mupl-map
        (mlet "f-AddN"
              ;takes a N, then returns a function that adds N to incoming value I
              ;args: N => I => return: int
              ;returns: 
              (fun #f "n"
                   (fun #f "i"
                        (add (var "i") (var "n"))
                        )
                   )
              (fun #f "n" (call (var "map")
                          (call (var "f-AddN") (var "n"))
                          ))
              )
        ))

;;Simplified the above:
(define mupl-mapAddN2
  (mlet "map" mupl-map
        (fun #f "n"
             (call (var "map")
                   (fun #f "y"
                        (add (var "n") (var "y")))))))


;; Challenge Problem

(struct fun-challenge (nameopt formal body freevars) #:transparent) ;; a recursive(?) 1-argument function

;; We will test this function directly, so it must do
;; as described in the assignment

(define (f-accumulate-vars e fvar-set)
  (cond
    [(int? e) fvar-set]
    [(fun? e)
         (let ([freevars (set-remove fvar-set (fun-formal e)) ])
           (fun-challenge (fun-nameopt e) (fun-formal e) (fun-body e) freevars)
           )]
    [(var? e)
     (set-add fvar-set (var-string e))]
    [#t e]
    )
  )

;read from e what vars are present
;fun-challenge in place of fun
;store free vars in the fun-challenge-freevars variable.
;grab all variable references within the function body, store to set
;subtract the arguments to the fun from the set
;account for mlets and shadowing?

(define (compute-free-vars e)
  (f-accumulate-vars e (set)))

;(fun #f "x" (add (var "x") (int 7)))

;; Do NOT share code with eval-under-env because that will make
;; auto-grading and peer assessment more difficult, so
;; copy most of your interpreter here and make minor changes
(define (eval-under-env-c e env)
  (cond [(var? e) 
         (envlookup env (var-string e))]
        [(add? e) 
         (let ([v1 (eval-under-env-c (add-e1 e) env)]
               [v2 (eval-under-env-c (add-e2 e) env)])
           (if (and (int? v1)
                    (int? v2))
               (int (+ (int-num v1) 
                       (int-num v2)))
               (error "MUPL addition applied to non-number")))]
        [(int? e) e]
        [(aunit? e) e]
        [(closure? e) e]
        [(fun? e) (closure env e)]
        [(ifgreater? e)
         (let ([v1 (eval-under-env-c (ifgreater-e1 e) env)]
               [v2 (eval-under-env-c (ifgreater-e2 e) env)])
           (if (and (int? v1)
                    (int? v2))
               (if (> (int-num v1) (int-num v2))
                   (eval-under-env-c (ifgreater-e3 e) env)
                   (eval-under-env-c (ifgreater-e4 e) env))
               (error "MUPL ifgreater expression evaluated to non-number")))]
        [(call? e)
         (let ([clos (eval-under-env-c (call-funexp e) env)]
               [args (eval-under-env-c (call-actual e) env)])
           (if (not(closure? clos))
               (error "MUPL call passed a non-function as function expression")
               (let ([f (closure-fun clos)])
                 (eval-under-env-c (fun-body f)
                                 (let ([arg-entry (cons (fun-formal f) args)]
                                       [clos-env (closure-env clos)])
                                   (if (fun-nameopt f)
                                       (cons (cons (fun-nameopt f) clos) (cons arg-entry clos-env))
                                       (cons arg-entry clos-env)))))))]
        ;ERV: struggling to write an appropriate recursive test case for the above for named functions.
        [(mlet? e)
         (let ([new-env (cons (cons (mlet-var e) (eval-under-env-c (mlet-e e) env)) env)])
           (eval-under-env-c (mlet-body e) new-env))]
        [(apair? e)
         (let ([v1 (eval-under-env-c (apair-e1 e) env)]
               [v2 (eval-under-env-c (apair-e2 e) env)])
           (apair v1 v2))] ;no type checking needed, as pair can hold (aunit)
        [(fst? e)
         (let ([v (eval-under-env-c (fst-e e) env)])
           (if (apair? v) (apair-e1 v) (error "MUPL fst passed non-pair expression")))]
        [(snd? e)
         (let ([v (eval-under-env-c (snd-e e) env)])
           (if (apair? v) (apair-e2 v) (error "MUPL snd passed non-pair expression")))]
        [(isaunit? e)
         (let ([v (eval-under-env-c (isaunit-e e) env)])
           (if (aunit? v) (int 1) (int 0)))]
        ;; End of ERV added cases
        [#t (error (format "bad MUPL expression: ~v" e))])
  )

;; Do NOT change this
(define (eval-exp-c e)
  (eval-under-env-c (compute-free-vars e) null))
