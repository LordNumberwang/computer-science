(* HW2 Provided Code *)
(* if you use this function to compare two strings (returns true if the same
   string), then you avoid several of the functions in problem 1 having
   polymorphic types that may be confusing *)
fun same_string(s1 : string, s2 : string) =
    s1 = s2;

(* ERV solution for problem 1 *)
fun all_except_option (exclude,strs) =
    let
        fun all_except (exclude, strs, is_found, acc) =
            case (exclude,strs,is_found,acc) of
                (_,[],false,acc) => NONE
              | (_,[],true,acc) => SOME(acc)
              | (exclude,x::xs',false,acc) => if same_string(exclude,x)
                                                then all_except(exclude,xs',true,acc)
                                                else all_except(exclude,xs',false,x::acc)
              | (exclude,x::xs',true,acc) => all_except(exclude,xs',true,x::acc) (* is_bound = true saves us a few calls to same_string *)
    in
        all_except(exclude,strs,false,[])
    end

fun get_substitutions1 (subs,s) =
    case (subs,s) of
        ([],s) => []
      | (x::xs',s) => case (all_except_option(s,x)) of
                          (NONE) => get_substitutions1(xs',s)
                        | (SOME y) => y @ get_substitutions1(xs',s)

fun get_substitutions2 (subs,s) =
    let
        fun sub_accumulation (subs,s,acc) =
            case (subs,s,acc) of
                ([],s,acc) => acc
              | (x::xs',s,acc) => case all_except_option(s,x) of
                                            (NONE) => sub_accumulation(xs',s,acc)
                                         | (SOME y) => sub_accumulation(xs',s,y @ acc)
    in
        sub_accumulation(subs,s,[])
    end

fun similar_names (subs, {first = f, middle = m, last = l}) =
    let
        fun replace_fname (sub_list,{first = f, middle = m, last = l}, acc) =
            case (sub_list, {first = f, middle = m, last = l}, acc) of
                ([],{first=f, middle=m, last=l},acc) => {first=f, middle=m, last=l}::acc
              | (x::xs',{first=f, middle=m, last=l},acc) => replace_fname(xs',{first=f, middle=m, last=l},{first=x, middle=m, last=l}::acc)
    in
        replace_fname(get_substitutions2(subs,f),{first = f, middle = m, last = l},[])
    end

(* you may assume that Num is always used with values 2, 3, ..., 10
   though it will not really come up *)
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Jack | Queen | King | Ace | Num of int 
type card = suit * rank;


datatype color = Red | Black
datatype move = Discard of card | Draw

exception IllegalMove

(* ERV solution for problem 2 *)
fun card_color (card) =
    case (card) of
        (Clubs,_) => Black
      | (Spades,_) => Black
      | (Hearts,_) => Red
      | (Diamonds,_) => Red

fun card_value (card) =
    case (card) of
        _ => NONE
